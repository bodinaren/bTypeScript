"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var orderBy_1 = require("../../src/linq/iterator/orderBy");
var Util = require("../../src/util");
var TestItems = require("./testitems");
describe("OrderByIterator", function () {
    describe("OrderBy", function () {
        describe("default comparer", function () {
            it("ascending firstname,", function () {
                var iterator = new orderBy_1.OrderByIterator(TestItems.objects, function (x) { return x.first; });
                var n;
                n = iterator.next();
                chai_1.expect(n.done).to.equal(false, "1st should NOT be done");
                chai_1.expect(n.value).to.eql(TestItems.joakim, "1st should be joakim:");
                n = iterator.next();
                chai_1.expect(n.done).to.equal(false, "2nd should NOT be done");
                chai_1.expect(n.value).to.eql(TestItems.kalle, "2nd should be kalle:");
                n = iterator.next();
                chai_1.expect(n.done).to.equal(false, "3rd should NOT be done");
                chai_1.expect(n.value).to.eql(TestItems.långben, "3rd should be långben:");
                n = iterator.next();
                chai_1.expect(n.done).to.equal(false, "4th should NOT be done");
                chai_1.expect(n.value).to.eql(TestItems.mimmi, "4th should be mimmi:");
                n = iterator.next();
                chai_1.expect(n.done).to.equal(false, "5th should NOT be done");
                chai_1.expect(n.value).to.eql(TestItems.musse, "5th should be musse:");
                n = iterator.next();
                chai_1.expect(n.done).to.equal(true, "6th should be done");
                chai_1.expect(n.value).to.equal(undefined, "6th should be undefined");
                n = iterator.next();
                chai_1.expect(n.done).to.equal(true, "consecutive should be done");
                chai_1.expect(n.value).to.equal(undefined, "consecutive should be undefined");
            });
            it("descending firstname,", function () {
                var iterator = new orderBy_1.OrderByIterator(TestItems.objects, function (x) { return x.first; }, Util.defaultComparer, true);
                var n;
                n = iterator.next();
                chai_1.expect(n.done).to.equal(false, "1st should NOT be done");
                chai_1.expect(n.value).to.eql(TestItems.musse, "1st should be musse:");
                n = iterator.next();
                chai_1.expect(n.done).to.equal(false, "2nd should NOT be done");
                chai_1.expect(n.value).to.eql(TestItems.mimmi, "2nd should be mimmi:");
                n = iterator.next();
                chai_1.expect(n.done).to.equal(false, "3rd should NOT be done");
                chai_1.expect(n.value).to.eql(TestItems.långben, "3rd should be långben:");
                n = iterator.next();
                chai_1.expect(n.done).to.equal(false, "4th should NOT be done");
                chai_1.expect(n.value).to.eql(TestItems.kalle, "4th should be kalle:");
                n = iterator.next();
                chai_1.expect(n.done).to.equal(false, "5th should NOT be done");
                chai_1.expect(n.value).to.eql(TestItems.joakim, "5th should be joakim:");
                n = iterator.next();
                chai_1.expect(n.done).to.equal(true, "6th should be done");
                chai_1.expect(n.value).to.equal(undefined, "6th should be undefined");
                n = iterator.next();
                chai_1.expect(n.done).to.equal(true, "consecutive should be done");
                chai_1.expect(n.value).to.equal(undefined, "consecutive should be undefined");
            });
        });
        describe("default keySelector", function () {
            it("ascending firstname,", function () {
                var iterator = new orderBy_1.OrderByIterator(TestItems.objects, undefined, function (a, b) { return Util.defaultComparer(a.first, b.first); });
                var n;
                n = iterator.next();
                chai_1.expect(n.done).to.equal(false, "1st should NOT be done");
                chai_1.expect(n.value).to.eql(TestItems.joakim, "1st should be joakim:");
                n = iterator.next();
                chai_1.expect(n.done).to.equal(false, "2nd should NOT be done");
                chai_1.expect(n.value).to.eql(TestItems.kalle, "2nd should be kalle:");
                n = iterator.next();
                chai_1.expect(n.done).to.equal(false, "3rd should NOT be done");
                chai_1.expect(n.value).to.eql(TestItems.långben, "3rd should be långben:");
                n = iterator.next();
                chai_1.expect(n.done).to.equal(false, "4th should NOT be done");
                chai_1.expect(n.value).to.eql(TestItems.mimmi, "4th should be mimmi:");
                n = iterator.next();
                chai_1.expect(n.done).to.equal(false, "5th should NOT be done");
                chai_1.expect(n.value).to.eql(TestItems.musse, "5th should be musse:");
                n = iterator.next();
                chai_1.expect(n.done).to.equal(true, "6th should be done");
                chai_1.expect(n.value).to.equal(undefined, "6th should be undefined");
                n = iterator.next();
                chai_1.expect(n.done).to.equal(true, "consecutive should be done");
                chai_1.expect(n.value).to.equal(undefined, "consecutive should be undefined");
            });
            it("descending firstname,", function () {
                var iterator = new orderBy_1.OrderByIterator(TestItems.objects, undefined, function (a, b) { return Util.defaultComparer(a.first, b.first); }, true);
                var n;
                n = iterator.next();
                chai_1.expect(n.done).to.equal(false, "1st should NOT be done");
                chai_1.expect(n.value).to.eql(TestItems.musse, "1st should be musse:");
                n = iterator.next();
                chai_1.expect(n.done).to.equal(false, "2nd should NOT be done");
                chai_1.expect(n.value).to.eql(TestItems.mimmi, "2nd should be mimmi:");
                n = iterator.next();
                chai_1.expect(n.done).to.equal(false, "3rd should NOT be done");
                chai_1.expect(n.value).to.eql(TestItems.långben, "3rd should be långben:");
                n = iterator.next();
                chai_1.expect(n.done).to.equal(false, "4th should NOT be done");
                chai_1.expect(n.value).to.eql(TestItems.kalle, "4th should be kalle:");
                n = iterator.next();
                chai_1.expect(n.done).to.equal(false, "5th should NOT be done");
                chai_1.expect(n.value).to.eql(TestItems.joakim, "5th should be joakim:");
                n = iterator.next();
                chai_1.expect(n.done).to.equal(true, "6th should be done");
                chai_1.expect(n.value).to.equal(undefined, "6th should be undefined");
                n = iterator.next();
                chai_1.expect(n.done).to.equal(true, "consecutive should be done");
                chai_1.expect(n.value).to.equal(undefined, "consecutive should be undefined");
            });
        });
    });
    describe("ThenBy", function () {
        it("ascending lastname - descending firstname,", function () {
            var iterator = new orderBy_1.OrderByIterator(TestItems.objects, function (x) { return x.last; });
            iterator.thenBy(function (x) { return x.first; }, Util.defaultComparer, true);
            var n;
            n = iterator.next();
            chai_1.expect(n.done).to.equal(false, "1st should NOT be done");
            chai_1.expect(n.value).to.eql(TestItems.mimmi, "1st should be mimmi:");
            n = iterator.next();
            chai_1.expect(n.done).to.equal(false, "2nd should NOT be done");
            chai_1.expect(n.value).to.eql(TestItems.kalle, "2nd should be kalle:");
            n = iterator.next();
            chai_1.expect(n.done).to.equal(false, "3rd should NOT be done");
            chai_1.expect(n.value).to.eql(TestItems.joakim, "3rd should be joakim:");
            n = iterator.next();
            chai_1.expect(n.done).to.equal(false, "4th should NOT be done");
            chai_1.expect(n.value).to.eql(TestItems.långben, "4th should be långben:");
            n = iterator.next();
            chai_1.expect(n.done).to.equal(false, "5th should NOT be done");
            chai_1.expect(n.value).to.eql(TestItems.musse, "5th should be musse:");
            n = iterator.next();
            chai_1.expect(n.done).to.equal(true, "6th should be done");
            chai_1.expect(n.value).to.equal(undefined, "6th should be undefined");
            n = iterator.next();
            chai_1.expect(n.done).to.equal(true, "consecutive should be done");
            chai_1.expect(n.value).to.equal(undefined, "consecutive should be undefined");
        });
        it("descending lastname - ascending firstname,", function () {
            var iterator = new orderBy_1.OrderByIterator(TestItems.objects, function (x) { return x.last[0]; }, Util.defaultComparer, true);
            iterator.thenBy(function (x) { return x.first; });
            var n;
            n = iterator.next();
            chai_1.expect(n.done).to.equal(false, "1st should NOT be done");
            chai_1.expect(n.value).to.eql(TestItems.musse, "1st should be musse:");
            n = iterator.next();
            chai_1.expect(n.done).to.equal(false, "2nd should NOT be done");
            chai_1.expect(n.value).to.eql(TestItems.långben, "2nd should be långben:");
            n = iterator.next();
            chai_1.expect(n.done).to.equal(false, "3rd should NOT be done");
            chai_1.expect(n.value).to.eql(TestItems.joakim, "3rd should be joakim:");
            n = iterator.next();
            chai_1.expect(n.done).to.equal(false, "4th should NOT be done");
            chai_1.expect(n.value).to.eql(TestItems.kalle, "4th should be kalle:");
            n = iterator.next();
            chai_1.expect(n.done).to.equal(false, "5th should NOT be done");
            chai_1.expect(n.value).to.eql(TestItems.mimmi, "5th should be mimmi:");
            n = iterator.next();
            chai_1.expect(n.done).to.equal(true, "6th should be done");
            chai_1.expect(n.value).to.equal(undefined, "6th should be undefined");
            n = iterator.next();
            chai_1.expect(n.done).to.equal(true, "consecutive should be done");
            chai_1.expect(n.value).to.equal(undefined, "consecutive should be undefined");
        });
    });
});
//# sourceMappingURL=order.spec.js.map